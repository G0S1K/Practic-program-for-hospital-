// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Main_Program.Models;

#nullable disable

namespace Main_Program.Data
{
    public partial class Program_V1Context : DbContext
    {
        public Program_V1Context()
        {
        }

        public Program_V1Context(DbContextOptions<Program_V1Context> options)
            : base(options)
        {
        }

        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Requests> Requests { get; set; }
        public virtual DbSet<RequestsProducts> RequestsProducts { get; set; }
        public virtual DbSet<Roles> Roles { get; set; }
        public virtual DbSet<Stores> Stores { get; set; }
        public virtual DbSet<Users> Users { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-QIL71SN\\SQLEXPRESS01;Initial Catalog=program_v1;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS");

            modelBuilder.Entity<Departments>(entity =>
            {
                entity.HasKey(e => e.IdDepartment);

                entity.Property(e => e.IdDepartment).ValueGeneratedNever();

                entity.Property(e => e.TypeDepartment).HasMaxLength(50);
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.IdProduct);

                entity.Property(e => e.IdProduct).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Requests>(entity =>
            {
                entity.HasKey(e => e.IdRequest);

                entity.Property(e => e.Date).HasMaxLength(50);

                entity.HasOne(d => d.SroreАppointmentNavigation)
                    .WithMany(p => p.RequestsSroreАppointmentNavigation)
                    .HasForeignKey(d => d.SroreАppointment)
                    .HasConstraintName("FK_Requests_Stores");

                entity.HasOne(d => d.StoreSourceNavigation)
                    .WithMany(p => p.RequestsStoreSourceNavigation)
                    .HasForeignKey(d => d.StoreSource)
                    .HasConstraintName("FK_Requests_Stores1");
            });

            modelBuilder.Entity<RequestsProducts>(entity =>
            {
                entity.HasKey(e => e.IdRequestsProducts);

                entity.HasOne(d => d.IdProductNavigation)
                    .WithMany(p => p.RequestsProducts)
                    .HasForeignKey(d => d.IdProduct)
                    .HasConstraintName("FK_RequestsProducts_Products");

                entity.HasOne(d => d.IdRequestNavigation)
                    .WithMany(p => p.RequestsProducts)
                    .HasForeignKey(d => d.IdRequest)
                    .HasConstraintName("FK_RequestsProducts_Requests");
            });

            modelBuilder.Entity<Roles>(entity =>
            {
                entity.HasKey(e => e.IdRole);

                entity.Property(e => e.IdRole).ValueGeneratedNever();

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<Stores>(entity =>
            {
                entity.HasKey(e => e.IdStore);

                entity.Property(e => e.IdStore).ValueGeneratedNever();

                entity.HasOne(d => d.IdDepartmentNavigation)
                    .WithMany(p => p.Stores)
                    .HasForeignKey(d => d.IdDepartment)
                    .HasConstraintName("FK_Stores_Departments");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Stores)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_Stores_Users");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.HasKey(e => e.IdUser);

                entity.Property(e => e.IdUser).ValueGeneratedNever();

                entity.Property(e => e.Login).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Password).HasMaxLength(50);

                entity.Property(e => e.SecondName).HasMaxLength(50);

                entity.HasOne(d => d.IdRoleNavigation)
                    .WithMany(p => p.Users)
                    .HasForeignKey(d => d.IdRole)
                    .HasConstraintName("FK_Users_Roles");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}